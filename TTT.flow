blockdiag {
initialization_code="

global X
X=lambda i: 'X'+str(i)

global O
O=lambda i: 'O'+str(i)

global anyX
anyX = (lambda e: e[0]=='X')

global anyMove
anyMove = (lambda e: anyX(e) or anyO(e))

global anyO
anyO = (lambda e: e[0]=='O')

global toX
toX = (lambda e: 'X' + e[1:])

global toO
toO = (lambda e: 'O' + e[1:])
"

    lines -> perm -> wt1 -> wt2 -> req;

    lines [type=start, initial="[{1:1,2:2,3:3}, {1:4,2:5,3:6}, {1:7,2:8,3:9}, {1:1,2:4,3:7}, {1:2,2:5,3:8}, {1:3,2:6,3:9},{1:1,2:5,3:9},{1:3,2:5,3:7}]", width=350];
    perm [type=permutation, keys="[1,2,3]"]
    wt1 [type=sync, wait="[X(t[1])]", width=200]
    wt2 [type=sync, wait="[X(t[2])]", width=200]
    req [type=sync, req="[O(t[3])]", width=200]

    ############

    int_st -> int_1 -> int_2 -> int_1;

    int_st [type=start]
    int_1 [type=sync, wait=anyX, block=anyO, width=100]
    int_2 [type=sync, wait=anyO, block=anyX, width=100]

    ###########

    once_st -> once_wt -> once_bl
    once_wt -> once_wt
    once_st [type=start]
    once_wt [type=sync, wait=anyMove]
    once_bl [type=sync, block="[toX(t['event']), toO(t['event'])]", width=300]


    ############

    st -> rq1
    st [type=start]
    rq1 [type=sync, req="['X2']"]

    st -> rq2
    rq2 [type=sync, req="['X3']"]

    st -> rq3 -> rq33
    rq3 [type=sync, req="['O5']"]
    rq33 [type=sync, req="['X5']"]

    ###########





    # For debugging
    class hidden [color = none, style = none, textcolor = white];
    stt -> listener -> logger [style = "none"];
    listener -> listener [style = "none"];
    listener [type=sync, wait="lambda e : True", class = "hidden", autoformat='false'];
    logger [type=logger, label="Events log", autoformat='false']
    stt [type=start, class = "hidden", autoformat='false'];

}
